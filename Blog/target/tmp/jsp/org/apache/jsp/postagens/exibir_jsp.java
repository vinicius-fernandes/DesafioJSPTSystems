/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.5.v20170502
 * Generated at: 2022-11-01 18:17:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.postagens;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.blog.entidades.Postagem;
import com.blog.entidades.Usuario;
import com.blog.entidades.Comentario;
import com.blog.dao.DaoPostagem;
import com.blog.dao.DaoComentario;
import java.text.DateFormat;
import java.util.List;

public final class exibir_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.blog.entidades.Postagem");
    _jspx_imports_classes.add("com.blog.entidades.Comentario");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.blog.dao.DaoPostagem");
    _jspx_imports_classes.add("com.blog.dao.DaoComentario");
    _jspx_imports_classes.add("com.blog.entidades.Usuario");
    _jspx_imports_classes.add("java.text.DateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


if(request.getParameter("id")==null || request.getParameter("id").isEmpty()){
    response.sendRedirect("../index.jsp");
}

Postagem post = DaoPostagem.getPostagem(Integer.parseInt(request.getParameter("id")));
List<Comentario> comentarios = DaoComentario.getComentariosPost(Integer.parseInt(request.getParameter("id")));


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write(" ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Bootstrap/bootstrap.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body class=\"bg=light\">\r\n");
      out.write(" ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Layout/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <div class=\"container\">\r\n");
      out.write(" <h1 class=\"text-center\">");
 out.write(post.getTitulo()); 
      out.write(" </h1>\r\n");
      out.write(" <p> ");
 out.write(post.getCorpo());
      out.write("</p>\r\n");
      out.write(" <small> ");

 if(post.getDataCriacao()!=null){
 out.write(""+DateFormat.getDateInstance().format(post.getDataCriacao()));
 }
 
      out.write("\r\n");
      out.write(" </small>\r\n");
      out.write(" <small> Publicado por: ");

 if(post.getUsuarioCriador() != null){
    out.write(post.getUsuarioCriador().getLogin()) ;
 }
 
      out.write(" </small>\r\n");
      out.write("\r\n");
      out.write(" <h4 class=\"mt-3\">Comentários</h4>\r\n");
      out.write("       ");

             String userLogin=(String)session.getAttribute("userLogin");
             if(userLogin !=null){ 
      out.write("\r\n");
      out.write("<form action=\"exibir.jsp?id=");
out.write(""+post.getId());
      out.write("\" method=\"POST\">\r\n");
      out.write("   <div class=\"form-group\">\r\n");
      out.write("      <textarea class=\"form-control\" id=\"corpoComentario\" name=\"corpoComentario\" required rows=\"3\" maxlength=\"255\" placeholder=\"Insira o seu comentário...\" ></textarea>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write(" <button class=\"btn btn-success mt-4\">Comentar</button>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("        ");

        }
        else{

      
      out.write("\r\n");
      out.write("      <div>\r\n");
      out.write("      <p class=\"alert alert-primary\"> Para comentar é necessário estar logado, <a href=\"../auth/login.jsp\">clique aqui para efetuar o login</a></p>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("         ");

              }

        
      out.write("\r\n");
      out.write("\r\n");

    if("POST".equals(request.getMethod()) && userLogin !=null){
                if(
                    request.getParameter("id")!=null
                    && request.getParameter("corpoComentario")!=null
                    && request.getParameter("id")!=null
                    && ! request.getParameter("corpoComentario").isEmpty()
                ){
                    String comentario = request.getParameter("corpoComentario");
                        out.write("<script>document.getElementById('corpoComentario').value='"+comentario+"';</script>");

                    if(comentario.length()>255 || comentario.length()<2){
                        out.write("<p class='alert alert-danger'>O comentario deve possuir entre 3 e 255 caracteres</p>");
                    }
                    else{
                        String userId=(String)session.getAttribute("userId");
                        if(userId !=null && ! userId.isEmpty()){

                            Comentario novoComentario = new Comentario();
                            novoComentario.setPostagem_id(Integer.parseInt(request.getParameter("id")));


                            novoComentario.setUsuario_id(Integer.parseInt(userId));
                            novoComentario.setCorpo(comentario);

                            if(DaoComentario.criar(novoComentario)){
                                out.write("<p class='alert alert-success'>O comentário foi salvo e em breve será analisado por um moderador.</p>");

                            }
                            else{
                                out.write("<p class='alert alert-danger'>Ocorreu um erro interno ao criar o comentário</p>");
                            }
                        }
                        else{
                                    out.write("<p class='alert alert-danger'>Não é possível identificar o usuário fazendo a postagem</p>");
                        }

                    }

                }
    }


      out.write("\r\n");
      out.write("\r\n");
      out.write(" ");

 for(Comentario com: comentarios){
    out.write("<div class='card col-6 my-3'>");
        out.write("<div class='card-body'>");

             out.write("<p class='card-text'>"+com.getCorpo()+" </p>");

        out.write("</div>");
        out.write("<div class='card-footer text-muted text-center'>");
        if(com.getDataCriacao()!=null){
        out.write(""+DateFormat.getDateInstance().format(com.getDataCriacao()));
        }
        if(com.getUsuario()!=null){
        out.write(" | Publicado por: "+com.getUsuario().getLogin());
        }
        out.write("</div>");
     out.write("</div>");

 }
 
      out.write("\r\n");
      out.write("\r\n");
      out.write(" </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
